/*
 * This source file was generated by the Gradle 'init' task
 */
package jared.stemen.fsm;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import lombok.extern.slf4j.Slf4j;

@Slf4j
class DoorFSMTest {

  public enum DoorState {
    OPEN,
    CLOSED,
    LOCKED
  }

  public enum DoorEvent {
    OPEN_DOOR,
    CLOSE_DOOR,
    LOCK_DOOR,
    UNLOCK_DOOR
  }

  @Test
  void exerciseComplexDoorInteractions() {
    // Create FSM with initial state OPEN
    final FiniteStateMachine<DoorState, DoorEvent> fsm =
        new FiniteStateMachineImpl<>(DoorState.OPEN);

    // Define all valid state transitions
    fsm.link(
            LinkBuilder.<DoorState, DoorEvent>builder()
                .sourceState(DoorState.OPEN)
                .event(DoorEvent.CLOSE_DOOR)
                .action(() -> log.info("closing door"))
                .targetState(DoorState.CLOSED)
                .build())
        .link(
            LinkBuilder.<DoorState, DoorEvent>builder()
                .sourceState(DoorState.CLOSED)
                .event(DoorEvent.OPEN_DOOR)
                .action(() -> log.info("opening door"))
                .targetState(DoorState.OPEN)
                .build())
        .link(
            LinkBuilder.<DoorState, DoorEvent>builder()
                .sourceState(DoorState.CLOSED)
                .event(DoorEvent.LOCK_DOOR)
                .action(() -> log.info("locking door"))
                .targetState(DoorState.LOCKED)
                .build())
        .link(
            LinkBuilder.<DoorState, DoorEvent>builder()
                .sourceState(DoorState.LOCKED)
                .event(DoorEvent.UNLOCK_DOOR)
                .action(() -> log.info("unlocking door"))
                .targetState(DoorState.CLOSED)
                .build());

    // Initial state verification
    assertThat(fsm.getState()).isEqualTo(DoorState.OPEN);
    log.info("Initial state: {}", fsm.getState());

    // Test invalid events for OPEN state
    assertThrows(
        IllegalStateException.class,
        () -> fsm.performEvent(DoorEvent.OPEN_DOOR),
        "Cannot open an already open door");

    assertThrows(
        IllegalStateException.class,
        () -> fsm.performEvent(DoorEvent.LOCK_DOOR),
        "Cannot lock an open door");

    assertThrows(
        IllegalStateException.class,
        () -> fsm.performEvent(DoorEvent.UNLOCK_DOOR),
        "Cannot unlock an open door");

    // OPEN -> CLOSED transition
    DoorState state = fsm.performEvent(DoorEvent.CLOSE_DOOR);
    assertThat(state).isEqualTo(DoorState.CLOSED);
    assertThat(fsm.getState()).isEqualTo(DoorState.CLOSED);
    log.info("After closing: {}", fsm.getState());

    // Test invalid events for CLOSED state
    assertThrows(
        IllegalStateException.class,
        () -> fsm.performEvent(DoorEvent.CLOSE_DOOR),
        "Cannot close an already closed door");

    assertThrows(
        IllegalStateException.class,
        () -> fsm.performEvent(DoorEvent.UNLOCK_DOOR),
        "Cannot unlock a door that isn't locked");

    // CLOSED -> LOCKED transition
    state = fsm.performEvent(DoorEvent.LOCK_DOOR);
    assertThat(state).isEqualTo(DoorState.LOCKED);
    assertThat(fsm.getState()).isEqualTo(DoorState.LOCKED);
    log.info("After locking: {}", fsm.getState());

    // Test invalid events for LOCKED state
    assertThrows(
        IllegalStateException.class,
        () -> fsm.performEvent(DoorEvent.OPEN_DOOR),
        "Cannot open a locked door");

    assertThrows(
        IllegalStateException.class,
        () -> fsm.performEvent(DoorEvent.CLOSE_DOOR),
        "Cannot close a locked door");

    assertThrows(
        IllegalStateException.class,
        () -> fsm.performEvent(DoorEvent.LOCK_DOOR),
        "Cannot lock an already locked door");

    // LOCKED -> CLOSED transition
    state = fsm.performEvent(DoorEvent.UNLOCK_DOOR);
    assertThat(state).isEqualTo(DoorState.CLOSED);
    assertThat(fsm.getState()).isEqualTo(DoorState.CLOSED);
    log.info("After unlocking: {}", fsm.getState());

    // CLOSED -> OPEN transition
    state = fsm.performEvent(DoorEvent.OPEN_DOOR);
    assertThat(state).isEqualTo(DoorState.OPEN);
    assertThat(fsm.getState()).isEqualTo(DoorState.OPEN);
    log.info("After opening: {}", fsm.getState());

    // Complete door cycle verification
    log.info("Completed full door cycle: OPEN -> CLOSED -> LOCKED -> CLOSED -> OPEN");
  }
}
