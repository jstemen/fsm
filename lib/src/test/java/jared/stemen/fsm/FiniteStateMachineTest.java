/*
 * This source file was generated by the Gradle 'init' task
 */
package jared.stemen.fsm;

import static org.assertj.core.api.Assertions.assertThat;
import static org.junit.jupiter.api.Assertions.*;

import org.junit.jupiter.api.Test;

import lombok.extern.slf4j.Slf4j;
import lombok.val;

@Slf4j
class FiniteStateMachineTest {

  public enum DoorState {
    OPEN,
    CLOSED,
    LOCKED
  }

  public enum DoorEvent {
    OPEN_DOOR,
    CLOSE_DOOR,
    LOCK_DOOR,
    UNLOCK_DOOR
  }

  @Test
  void exerciseDoor() {

    final FiniteStateMachine<DoorState, DoorEvent> fsm = new FiniteStateMachine<>(DoorState.OPEN);

    fsm.link(
            LinkBuilder.<DoorState, DoorEvent>builder()
                .sourceState(DoorState.OPEN)
                .event(DoorEvent.CLOSE_DOOR)
                .action(() -> log.info("closing door"))
                .targetState(DoorState.CLOSED)
                .build())
        .link(
            LinkBuilder.<DoorState, DoorEvent>builder()
                .sourceState(DoorState.CLOSED)
                .event(DoorEvent.OPEN_DOOR)
                .action(() -> log.info("opening door"))
                .targetState(DoorState.OPEN)
                .build())
        .link(
            LinkBuilder.<DoorState, DoorEvent>builder()
                .sourceState(DoorState.CLOSED)
                .event(DoorEvent.LOCK_DOOR)
                .action(() -> log.info("locking door"))
                .targetState(DoorState.LOCKED)
                .build())
        .link(
            LinkBuilder.<DoorState, DoorEvent>builder()
                .sourceState(DoorState.LOCKED)
                .event(DoorEvent.UNLOCK_DOOR)
                .action(() -> log.info("unlocking door"))
                .targetState(DoorState.CLOSED)
                .build());

    assertThat(fsm.getState()).isEqualTo(DoorState.OPEN);

    // todo validate message
    assertThrows(
        IllegalStateException.class,
        () -> {
          fsm.performEvent(DoorEvent.OPEN_DOOR);
        });

    assertThrows(
        IllegalStateException.class,
        () -> {
          fsm.performEvent(DoorEvent.LOCK_DOOR);
        });

    val out = fsm.performEvent(DoorEvent.CLOSE_DOOR);
    assertThat(out).isEqualTo(DoorState.CLOSED);
  }
}
